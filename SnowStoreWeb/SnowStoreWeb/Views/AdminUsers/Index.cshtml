@model IEnumerable<SnowStoreWeb.Models.User>
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "User Management";
    var currentUserId = HttpContextAccessor.HttpContext.Session.GetString("UserId");
    var currentUserRole = HttpContextAccessor.HttpContext.Session.GetString("UserRole");
}

<div class="container-fluid">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="display-6 fw-bold text-primary">
                <i class="fas fa-users"></i> User Management
            </h1>
            <p class="text-muted">Manage all users in the system</p>
        </div>
        <div class="col-md-4 text-end">
            <a asp-action="Create" class="btn btn-primary btn-lg">
                <i class="fas fa-user-plus"></i> Create New User
            </a>
        </div>
    </div>

    <!-- Alerts for Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Statistics Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@ViewBag.TotalCount</h4>
                            <p class="mb-0">Total Users</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-users fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@(Model.Count(u => u.Role == "Admin"))</h4>
                            <p class="mb-0">Admins</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-user-shield fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@(Model.Count(u => u.Role == "User"))</h4>
                            <p class="mb-0">Regular Users</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-user fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <h4>@(Model.Count(u => u.CreatedDate >= DateTime.Now.AddDays(-30)))</h4>
                            <p class="mb-0">New This Month</p>
                        </div>
                        <div class="align-self-center">
                            <i class="fas fa-user-plus fa-2x"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="card mb-4">
        <div class="card-body">
            <form method="get" asp-action="Index" class="row g-3">
                <div class="col-md-4">
                    <label class="form-label fw-bold">
                        <i class="fas fa-search"></i> Search Users
                    </label>
                    <input type="text" name="searchTerm" value="@ViewBag.SearchTerm"
                           class="form-control" placeholder="Search by name or email...">
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-bold">
                        <i class="fas fa-filter"></i> Filter by Role
                    </label>
                    <select name="roleFilter" class="form-select">
                        <option value="">All Roles</option>
                        @foreach (var role in ViewBag.RoleOptions as List<SelectListItem>)
                        {
                            if (!string.IsNullOrEmpty(role.Value))
                            {
                                <option value="@role.Value" selected="@(role.Value == ViewBag.RoleFilter)">
                                    @role.Text
                                </option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-2">
                    <label class="form-label fw-bold">Page Size</label>
                    <select name="pageSize" class="form-select">
                        <option value="10" selected="@(ViewBag.PageSize == 10)">10</option>
                        <option value="25" selected="@(ViewBag.PageSize == 25)">25</option>
                        <option value="50" selected="@(ViewBag.PageSize == 50)">50</option>
                    </select>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button type="submit" class="btn btn-primary me-2">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <a asp-action="Index" class="btn btn-secondary">
                        <i class="fas fa-times"></i> Clear
                    </a>
                </div>
            </form>
        </div>
    </div>

    <!-- Users Table -->
    <div class="card shadow">
        <div class="card-header bg-white border-bottom">
            <div class="row align-items-center">
                <div class="col">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list"></i> Users List
                        @if (!string.IsNullOrEmpty(ViewBag.SearchTerm) || !string.IsNullOrEmpty(ViewBag.RoleFilter))
                        {
                            <small class="text-muted">
                                (Filtered: @Model.Count() of @ViewBag.TotalCount users)
                            </small>
                        }
                    </h5>
                </div>
                <div class="col-auto">
                    <button class="btn btn-sm btn-outline-secondary" onclick="toggleView()">
                        <i class="fas fa-th" id="viewToggleIcon"></i> <span id="viewToggleText">Card View</span>
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <!-- Table View -->
            <div id="tableView">
                @if (Model.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th class="fw-bold">
                                        <i class="fas fa-user"></i> Name
                                    </th>
                                    <th class="fw-bold">
                                        <i class="fas fa-envelope"></i> Email
                                    </th>
                                    <th class="fw-bold">
                                        <i class="fas fa-user-tag"></i> Role
                                    </th>
                                    <th class="fw-bold">
                                        <i class="fas fa-calendar"></i> Created Date
                                    </th>
                                    <th class="fw-bold text-center">
                                        <i class="fas fa-cog"></i> Actions
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>
                                            <div class="d-flex align-items-center">
                                                <div class="avatar-circle me-2">
                                                    @item.Name.Substring(0, 1).ToUpper()
                                                </div>
                                                <strong>@item.Name</strong>
                                            </div>
                                        </td>
                                        <td>@item.Email</td>
                                        <td>
                                            <span class="badge @GetRoleBadgeClass(item.Role)">
                                                <i class="@GetRoleIcon(item.Role)"></i> @item.Role
                                            </span>
                                        </td>
                                        <td>
                                            <small class="text-muted">
                                                @(item.CreatedDate?.ToString("MMM dd, yyyy"))
                                            </small>
                                        </td>
                                        <td class="text-center">
                                            <div class="action-buttons">
                                                <a asp-action="Details" asp-route-id="@item.UserId"
                                                   class="btn btn-sm btn-info text-white me-1" title="View Details">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                @if (currentUserRole == "Admin" && (item.UserId.ToString() == currentUserId || item.Role == "User"))
                                                {
                                                    <a asp-action="Edit" asp-route-id="@item.UserId"
                                                       class="btn btn-sm btn-warning text-dark me-1" title="Edit User">
                                                        <i class="fas fa-edit"></i>
                                                    </a>
                                                }
                                                @if (currentUserRole == "Admin" && item.Role == "User")
                                                {
                                                    <form asp-action="DeleteConfirmed" asp-route-id="@item.UserId" method="post" class="d-inline delete-form">
                                                        @Html.AntiForgeryToken()
                                                        <button type="submit" class="btn btn-sm btn-danger" title="Delete User"
                                                                onclick="return confirmDelete(@item.UserId, '@item.Name', this)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </form>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-users fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No users found</h5>
                        <p class="text-muted">Try adjusting your search criteria or create a new user.</p>
                        <a asp-action="Create" class="btn btn-primary">
                            <i class="fas fa-user-plus"></i> Create First User
                        </a>
                    </div>
                }
            </div>

            <!-- Card View -->
            <div id="cardView" style="display: none;">
                <div class="row g-3 p-3">
                    @foreach (var item in Model)
                    {
                        <div class="col-md-6 col-lg-4">
                            <div class="card h-100">
                                <div class="card-body">
                                    <div class="text-center mb-3">
                                        <div class="avatar-circle-large mx-auto mb-2">
                                            @item.Name.Substring(0, 1).ToUpper()
                                        </div>
                                        <h6 class="card-title mb-1">@item.Name</h6>
                                        <small class="text-muted">@item.Email</small>
                                    </div>
                                    <div class="text-center mb-3">
                                        <span class="badge @GetRoleBadgeClass(item.Role)">
                                            <i class="@GetRoleIcon(item.Role)"></i> @item.Role
                                        </span>
                                    </div>
                                    <div class="text-center">
                                        <small class="text-muted">
                                            Created: @(item.CreatedDate?.ToString("MMM dd, yyyy"))
                                        </small>
                                    </div>
                                </div>
                                <div class="card-footer bg-transparent">
                                    <div class="action-buttons text-center">
                                        <a asp-action="Details" asp-route-id="@item.UserId"
                                           class="btn btn-sm btn-info text-white me-1">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        @if (currentUserRole == "Admin" && (item.UserId.ToString() == currentUserId || item.Role == "User"))
                                        {
                                            <a asp-action="Edit" asp-route-id="@item.UserId"
                                               class="btn btn-sm btn-warning text-dark me-1">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                        }
                                        @if (currentUserRole == "Admin" && item.Role == "User")
                                        {
                                            <form asp-action="DeleteConfirmed" asp-route-id="@item.UserId" method="post" class="d-inline delete-form">
                                                @Html.AntiForgeryToken()
                                                <button type="submit" class="btn btn-sm btn-danger"
                                                        onclick="return confirmDelete(@item.UserId, '@item.Name', this)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </form>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    @if (ViewBag.TotalPages > 1)
    {
        <nav class="mt-4">
            <ul class="pagination justify-content-center">
                <!-- Previous Page -->
                @if (ViewBag.CurrentPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(ViewBag.CurrentPage - 1)">
                            <i class="fas fa-chevron-left"></i> Previous
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link"><i class="fas fa-chevron-left"></i> Previous</span>
                    </li>
                }

                <!-- Page Numbers -->
                @{
                    int startPage = Math.Max(1, ViewBag.CurrentPage - 2);
                    int endPage = Math.Min(ViewBag.TotalPages, ViewBag.CurrentPage + 2);
                }

                @if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(1)">1</a>
                    </li>
                    @if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                        <a class="page-link" href="@GetPageUrl(i)">@i</a>
                    </li>
                }

                @if (endPage < ViewBag.TotalPages)
                {
                    @if (endPage < ViewBag.TotalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(ViewBag.TotalPages)">@ViewBag.TotalPages</a>
                    </li>
                }

                <!-- Next Page -->
                @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@GetPageUrl(ViewBag.CurrentPage + 1)">
                            Next <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                }
                else
                {
                    <li class="page-item disabled">
                        <span class="page-link">Next <i class="fas fa-chevron-right"></i></span>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle"></i> Confirm Delete
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete user <strong id="deleteUserName"></strong>?</p>
                <p class="text-warning">
                    <i class="fas fa-warning"></i> This action cannot be undone.
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <i class="fas fa-trash"></i> Delete User
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Toast Container -->
<div id="toastContainer" class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;"></div>

<style>
    .avatar-circle {
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 12px;
    }

    .avatar-circle-large {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 24px;
    }

    .card {
        transition: transform 0.2s ease-in-out;
        border: 1px solid #e3e6f0;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 25px 0 rgba(0,0,0,.1);
        }

    .table th {
        background-color: #f8f9fc;
        border-bottom: 2px solid #e3e6f0;
        font-weight: 600;
    }

    .table td {
        vertical-align: middle;
        padding: 1rem 0.75rem;
    }

    /* Action Buttons Styling */
    .action-buttons .btn {
        border-radius: 6px !important;
        font-size: 12px;
        padding: 4px 8px;
        transition: all 0.2s ease-in-out;
    }

        .action-buttons .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        }

    .btn-info {
        background-color: #36b9cc !important;
        border-color: #36b9cc !important;
    }

        .btn-info:hover {
            background-color: #258391 !important;
            border-color: #258391 !important;
        }

    .btn-warning {
        background-color: #f6c23e !important;
        border-color: #f6c23e !important;
    }

        .btn-warning:hover {
            background-color: #dda20a !important;
            border-color: #dda20a !important;
        }

    .btn-danger {
        background-color: #e74a3b !important;
        border-color: #e74a3b !important;
    }

        .btn-danger:hover {
            background-color: #c0392b !important;
            border-color: #c0392b !important;
        }

    .pagination .page-link {
        color: #5a5c69;
        border: 1px solid #e3e6f0;
    }

    .pagination .page-item.active .page-link {
        background-color: #5a5c69;
        border-color: #5a5c69;
    }

    .alert {
        border-radius: 0.5rem;
        border: none;
    }

    .display-6 {
        font-size: 2.5rem;
        font-weight: 600;
    }

    .badge.bg-danger {
        background-color: #e74a3b !important;
    }

    .badge.bg-success {
        background-color: #1cc88a !important;
    }

    .badge.bg-info {
        background-color: #36b9cc !important;
    }

    .badge.bg-warning {
        background-color: #f6c23e !important;
        color: #333 !important;
    }

    /* Toast Styling */
    .toast {
        border: none;
        border-radius: 12px;
        box-shadow: 0 8px 30px rgba(0,0,0,0.12);
    }

    .toast-success {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
    }

    .toast-error {
        background: linear-gradient(135deg, #dc3545 0%, #e83e8c 100%);
        color: white;
    }

    .toast-warning {
        background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
        color: #212529;
    }
</style>

<script>
    function toggleView() {
        const tableView = document.getElementById('tableView');
        const cardView = document.getElementById('cardView');
        const icon = document.getElementById('viewToggleIcon');
        const text = document.getElementById('viewToggleText');

        if (tableView.style.display === 'none') {
            tableView.style.display = 'block';
            cardView.style.display = 'none';
            icon.className = 'fas fa-th';
            text.textContent = 'Card View';
        } else {
            tableView.style.display = 'none';
            cardView.style.display = 'block';
            icon.className = 'fas fa-table';
            text.textContent = 'Table View';
        }
    }

    let currentDeleteForm = null;

    function confirmDelete(userId, userName, button) {
        currentDeleteForm = button.closest('form');
        document.getElementById('deleteUserName').textContent = userName;
        const modal = new bootstrap.Modal(document.getElementById('deleteModal'));
        modal.show();
        return false; // Prevent default form submission
    }

    document.getElementById('confirmDeleteBtn').addEventListener('click', function () {
        if (currentDeleteForm) {
            const button = currentDeleteForm.querySelector('.btn-danger');
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
            button.disabled = true;

            const xhr = new XMLHttpRequest();
            xhr.open('POST', currentDeleteForm.action, true);
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');

            const token = currentDeleteForm.querySelector('input[name="__RequestVerificationToken"]').value;
            const data = `__RequestVerificationToken=${encodeURIComponent(token)}`;

            xhr.onload = function () {
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
                modal.hide();
                button.innerHTML = '<i class="fas fa-trash"></i>';
                button.disabled = false;
                if (xhr.status === 200) {
                    showToast('User deleted successfully', 'success');
                    setTimeout(() => {
                        window.location.reload(); // Reload page to update table
                    }, 1500);
                } else {
                    showToast('Failed to delete user', 'error');
                }
            };

            xhr.onerror = function () {
                const modal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
                modal.hide();
                button.innerHTML = '<i class="fas fa-trash"></i>';
                button.disabled = false;
                showToast('An error occurred while deleting the user', 'error');
            };

            xhr.send(data);
        }
    });

    // Toast Notifications
    function showToast(message, type = 'success') {
        const toastContainer = document.getElementById('toastContainer');
        const toastId = 'toast_' + Date.now();

        const toastHTML = `
                <div id="${toastId}" class="toast toast-${type}" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-body d-flex align-items-center p-3">
                        <i class="fas fa-${getToastIcon(type)} me-3 fs-5"></i>
                        <div class="flex-grow-1">${message}</div>
                        <button type="button" class="btn-close btn-close-white ms-2" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;

        toastContainer.insertAdjacentHTML('beforeend', toastHTML);

        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement, {
            autohide: true,
            delay: 5000
        });

        toast.show();

        toastElement.addEventListener('hidden.bs.toast', function () {
            toastElement.remove();
        });
    }

    function getToastIcon(type) {
        switch (type) {
            case 'success': return 'check-circle-fill';
            case 'error': return 'exclamation-circle-fill';
            case 'warning': return 'exclamation-triangle-fill';
            default: return 'info-circle-fill';
        }
    }

    // Auto-hide alerts after 5 seconds
    document.addEventListener('DOMContentLoaded', function () {
        setTimeout(function () {
            const alerts = document.querySelectorAll('.alert');
            alerts.forEach(function (alert) {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            });
        }, 5000);

        // Show toasts for server messages
    @if (TempData["SuccessMessage"] != null)
    {
        <text>showToast('@TempData["SuccessMessage"]', 'success');</text>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <text>showToast('@TempData["ErrorMessage"]', 'error');</text>
    }
        });

    // Add spinning animation for loading
    const spinStyle = document.createElement('style');
    spinStyle.textContent = `
    @@keyframes spin {
                from { transform: rotate(0deg); }
                to { transform: rotate(360deg); }
            }

            .fa-spin {
                animation: spin 1s linear infinite;
            }
        `;
    document.head.appendChild(spinStyle);
</script>

@functions {
    private string GetRoleBadgeClass(string role)
    {
        return role switch
        {
            "Admin" => "bg-danger",
            "User" => "bg-success",
            _ => "bg-secondary"
        };
    }

    private string GetRoleIcon(string role)
    {
        return role switch
        {
            "Admin" => "fas fa-user-shield",
            "User" => "fas fa-user",
            _ => "fas fa-user"
        };
    }

    private string GetPageUrl(int page)
    {
        var searchTerm = ViewBag.SearchTerm?.ToString() ?? "";
        var roleFilter = ViewBag.RoleFilter?.ToString() ?? "";
        var pageSize = ViewBag.PageSize?.ToString() ?? "10";

        return $"?page={page}&searchTerm={searchTerm}&roleFilter={roleFilter}&pageSize={pageSize}";
    }
}